[tool.poetry]
name = "innohassle-rooms"
version = "0.1.0"
description = "A service for task management in rooms"
authors = ["Maxim Fomin <m.fomin@innopolis.university>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
alembic = "^1.14.0"
asyncpg = "^0"
black = "24.10.0"
fastapi = "^0"
httpx = "^0"
pre-commit = "^4.0.1"
psycopg = {extras = ["binary", "pool"], version = "^3.2.3"}
pydantic = "^2.10.3"
pydantic-settings = "^2.6.1"
pytest = "^8.3.4"
pytest-asyncio = "^0.25.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
ruff = "^0.8.3"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.36"}
sqlmodel = "^0"
uvicorn = "^0"
wheel = "^0"

[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
addopts = [
    "--strict-config",
    "--strict-markers",
]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if enabled:",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about TYPE_CHECKING imports:
    "if TYPE_CHECKING:",
]

ignore_errors = true
